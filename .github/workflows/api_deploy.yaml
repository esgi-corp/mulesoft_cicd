name: Deploy MuleSoft API

on:
  workflow_call:
    inputs:
      env:
        description: "Environnement de d√©ploiement"
        required: true
        type: string
      branch:
        description: "Nom de la branche √† d√©ployer"
        required: false
        type: string
      workers:
        description: "Nombre de replicas"
        required: false
        type: string
      vcores:
        description: "Nombre de vcores"
        required: false
        type: string
      app_name:
        description: "Nom de l'API"
        required: false
        type: string
      repo_props_name:
        description: "Nom du repository des propri√©t√©s"
        required: false
        type: string

jobs:
  deploy_api:
    runs-on: ubuntu-latest

    env:
      ANYPOINT_CLIENT_ID: ${{ secrets.ANYPOINT_CLIENT_ID }}
      ANYPOINT_CLIENT_SECRET: ${{ secrets.ANYPOINT_CLIENT_SECRET }}
      CONNECTEDAPP_CLIENT_ID: ${{ secrets.CONNECTEDAPP_CLIENT_ID }}
      CONNECTEDAPP_CLIENT_SECRET: ${{ secrets.CONNECTEDAPP_CLIENT_SECRET }}
      TARGET: ${{ secrets.TARGET }}
      GIT_ORG: ${{ secrets.GIT_ORG }}
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      APP_NAME: ${{ inputs.APP_NAME }}
      WORKERS: ${{ inputs.WORKERS }}
      VCORES: ${{ inputs.VCORES }}
      SANDBOX_MULE_KEY: ${{ secrets.SANDBOX_MULE_KEY}}
      PRD_MULE_KEY: ${{ secrets.PRD_MULE_KEY }}
      DEV_MULE_KEY: ${{ secrets.DEV_MULE_KEY }}
      ENV: ${{ inputs.ENV }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}
          token: ${{ secrets.PAT_TOKEN }}

      - name: Checkout Properties repository
        uses: actions/checkout@v4
        with:
          repository: esgi-corp/${{ inputs.REPO_PROPS_NAME }}
          path: properties-repo
          token: ${{ secrets.PAT_TOKEN }}

      - name: Inject all properties into API package
        run: |
          echo "üì• Injecting ALL properties into API package"
          mkdir -p src/main/resources/props

          # Copier tous les fichiers *-properties.yaml et *-secure-properties.yaml
          cp -v properties-repo/*-properties.yaml src/main/resources/props/ || true
          cp -v properties-repo/*-secure-properties.yaml src/main/resources/props/ || true

          echo "üîç Checking injected properties..."
          ls -l src/main/resources/props

          echo "üìÑ Preview properties files content:"
          for f in src/main/resources/props/*.yaml; do
            echo "------ $f ------"
            head -n 10 "$f"   # affiche les 10 premi√®res lignes de chaque fichier
          done

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up vars API name
        run: |
          echo "API_NAME=${APP_NAME}-${ENV}" >> $GITHUB_ENV

      - name: Publish asset to Github
        if: inputs.ENV == 'sandbox'
        run: |
          echo "üì¶ Publishing to Github..."
            mvn clean deploy --settings .maven/settings.xml -DskipTests \
              -DaltDeploymentRepository=github-mule-assets::default::https://maven.pkg.github.com/esgi-corp/mule-assets \
              -Dclient.id="$CONNECTEDAPP_CLIENT_ID" \
              -Dclient.secret="$CONNECTEDAPP_CLIENT_SECRET" \
              -Dgit.username=${GIT_ORG} \
              -Dpat.token=${PAT_TOKEN}

      - name: Publish asset to Exchange
        if: inputs.ENV == 'sandbox'
        run: |
          echo "üì¶ Publishing to Exchange..."
            mvn clean deploy --settings .maven/settings.xml -DskipTests \
              -Dclient.id="$CONNECTEDAPP_CLIENT_ID" \
              -Dclient.secret="$CONNECTEDAPP_CLIENT_SECRET" \
              -Dgit.username=${GIT_ORG} \
              -Dpat.token=${PAT_TOKEN}

      - name: Select mule key based on env deployment
        run: |
          if [ "${ENV}" = "prd" ]; then
            echo "MULE_KEY=${PRD_MULE_KEY}" >> $GITHUB_ENV
          elif [ "${ENV}" = "dev" ]; then
            echo "MULE_KEY=${DEV_MULE_KEY}" >> $GITHUB_ENV
          else
            echo "MULE_KEY=${SANDBOX_MULE_KEY}" >> $GITHUB_ENV
          fi

      - name: Build Package API
        run: |
          echo "üèóÔ∏è Building API Package..."
          mvn clean package --settings .maven/settings.xml -DskipTests

      - name: Inspect packaged JAR
        run: |
          echo "üîé Inspecting JAR content..."
          unzip -l target/*.jar | grep props/

      - name: Show properties inside JAR
        run: |
          jar xf target/*.jar props/
          for f in props/*.yaml; do
            echo "------ $f ------"
            head -n 20 "$f"
          done
          exit 1

      - name: Deploy to CloudHub 2.0
        run: |
          mvn deploy --settings .maven/settings.xml -DmuleDeploy \
          -Dapp.name=${API_NAME} \
          -Denv=${ENV} \
          -Dtarget=${TARGET} \
          -Dclient.id="${CONNECTEDAPP_CLIENT_ID}" \
          -Dclient.secret="${CONNECTEDAPP_CLIENT_SECRET}" \
          -DanypointClientId=${ANYPOINT_CLIENT_ID} \
          -DanypointClientSecret=${ANYPOINT_CLIENT_SECRET} \
          -Dmule.key=${MULE_KEY} \
          -Dgit.username=${GIT_ORG} \
          -Dworkers=${WORKERS} \
          -Dvirtual.cores=${VCORES} \
          -Dpat.token=${PAT_TOKEN}

      - name: Check deployment success
        if: steps.deploy.outcome == 'success'
        run: echo "‚úÖ Deployment succeeded."

      - name: Extract version from pom.xml
        id: extract_version
        run: |
          VERSION=$(grep -m 1 '<version>' pom.xml | sed -E 's/.*<version>([^<]+)<\/version>.*/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create and push tag
        if: inputs.env == 'sandbox'
        run: |
          TAG_NAME="${APP_NAME}-${VERSION}"

          echo "üîç Checking if tag $TAG_NAME already exists on remote..."

          if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME$"; then
            echo "‚úÖ Tag $TAG_NAME already exists. Skipping tag creation."
          else
            echo "üè∑Ô∏è Creating and pushing tag $TAG_NAME..."
            git tag $TAG_NAME
            git push origin $TAG_NAME
          fi

      - name: Update branch main to deployed tag
        if: inputs.env == 'prd'
        run: |
          echo "üîÄ Updating branch main to tag ${{ github.ref_name }}..."

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # R√©cup√®re la branche main et le tag
          git fetch origin main --depth=1
          git fetch origin "refs/tags/${{ github.ref_name }}:refs/tags/${{ github.ref_name }}"

          # Bascule main sur le commit du tag
          git checkout main
          git reset --hard "${{ github.ref_name }}"

          # Met √† jour main c√¥t√© remote
          git push origin main --force
